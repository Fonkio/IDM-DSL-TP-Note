/*
 * generated by Xtext 2.25.0
 */
package ups.m2dl.tpnote.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import ups.m2dl.tpnote.ide.contentassist.antlr.internal.InternalMaisonDeDisqueParser;
import ups.m2dl.tpnote.services.MaisonDeDisqueGrammarAccess;

public class MaisonDeDisqueParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MaisonDeDisqueGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MaisonDeDisqueGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getAlbumTypeAccess().getAlternatives(), "rule__AlbumType__Alternatives");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getGroup(), "rule__MaisonDeDisque__Group__0");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getGroup_5(), "rule__MaisonDeDisque__Group_5__0");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getGroup_10(), "rule__MaisonDeDisque__Group_10__0");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getGroup_15(), "rule__MaisonDeDisque__Group_15__0");
			builder.put(grammarAccess.getChansonAccess().getGroup(), "rule__Chanson__Group__0");
			builder.put(grammarAccess.getChansonAccess().getGroup_6(), "rule__Chanson__Group_6__0");
			builder.put(grammarAccess.getChansonAccess().getGroup_11(), "rule__Chanson__Group_11__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup(), "rule__Album__Group__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup_3(), "rule__Album__Group_3__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup_4(), "rule__Album__Group_4__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup_8(), "rule__Album__Group_8__0");
			builder.put(grammarAccess.getPersonneAccess().getGroup(), "rule__Personne__Group__0");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getChansonsAssignment_4(), "rule__MaisonDeDisque__ChansonsAssignment_4");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getChansonsAssignment_5_1(), "rule__MaisonDeDisque__ChansonsAssignment_5_1");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getAlbumsAssignment_9(), "rule__MaisonDeDisque__AlbumsAssignment_9");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getAlbumsAssignment_10_1(), "rule__MaisonDeDisque__AlbumsAssignment_10_1");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getPersonnesAssignment_14(), "rule__MaisonDeDisque__PersonnesAssignment_14");
			builder.put(grammarAccess.getMaisonDeDisqueAccess().getPersonnesAssignment_15_1(), "rule__MaisonDeDisque__PersonnesAssignment_15_1");
			builder.put(grammarAccess.getChansonAccess().getNameAssignment_1(), "rule__Chanson__NameAssignment_1");
			builder.put(grammarAccess.getChansonAccess().getAuteursAssignment_5(), "rule__Chanson__AuteursAssignment_5");
			builder.put(grammarAccess.getChansonAccess().getAuteursAssignment_6_1(), "rule__Chanson__AuteursAssignment_6_1");
			builder.put(grammarAccess.getChansonAccess().getChanteursAssignment_10(), "rule__Chanson__ChanteursAssignment_10");
			builder.put(grammarAccess.getChansonAccess().getChanteursAssignment_11_1(), "rule__Chanson__ChanteursAssignment_11_1");
			builder.put(grammarAccess.getAlbumAccess().getNameAssignment_1(), "rule__Album__NameAssignment_1");
			builder.put(grammarAccess.getAlbumAccess().getAnneeSortieAssignment_3_1(), "rule__Album__AnneeSortieAssignment_3_1");
			builder.put(grammarAccess.getAlbumAccess().getTypeAssignment_4_1(), "rule__Album__TypeAssignment_4_1");
			builder.put(grammarAccess.getAlbumAccess().getChansonsAssignment_7(), "rule__Album__ChansonsAssignment_7");
			builder.put(grammarAccess.getAlbumAccess().getChansonsAssignment_8_1(), "rule__Album__ChansonsAssignment_8_1");
			builder.put(grammarAccess.getPersonneAccess().getNameAssignment_2(), "rule__Personne__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MaisonDeDisqueGrammarAccess grammarAccess;

	@Override
	protected InternalMaisonDeDisqueParser createParser() {
		InternalMaisonDeDisqueParser result = new InternalMaisonDeDisqueParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MaisonDeDisqueGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MaisonDeDisqueGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
