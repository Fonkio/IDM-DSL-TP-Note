/*
 * generated by Xtext 2.25.0
 */
package ups.m2dl.tpNote.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import ups.m2dl.tpNote.ide.contentassist.antlr.internal.InternalMaisonDeDisqueParser;
import ups.m2dl.tpNote.services.MaisonDeDisqueGrammarAccess;

public class MaisonDeDisqueParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MaisonDeDisqueGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MaisonDeDisqueGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getAlbumsTypeAccess().getAlternatives(), "rule__AlbumsType__Alternatives");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getGroup(), "rule__MaisonDeDisques__Group__0");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getGroup_5(), "rule__MaisonDeDisques__Group_5__0");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getGroup_10(), "rule__MaisonDeDisques__Group_10__0");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getGroup_15(), "rule__MaisonDeDisques__Group_15__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup(), "rule__Album__Group__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup_2(), "rule__Album__Group_2__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup_3(), "rule__Album__Group_3__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup_4(), "rule__Album__Group_4__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup_5(), "rule__Album__Group_5__0");
			builder.put(grammarAccess.getAlbumAccess().getGroup_9(), "rule__Album__Group_9__0");
			builder.put(grammarAccess.getChansonAccess().getGroup(), "rule__Chanson__Group__0");
			builder.put(grammarAccess.getChansonAccess().getGroup_2(), "rule__Chanson__Group_2__0");
			builder.put(grammarAccess.getChansonAccess().getGroup_3(), "rule__Chanson__Group_3__0");
			builder.put(grammarAccess.getChansonAccess().getGroup_7(), "rule__Chanson__Group_7__0");
			builder.put(grammarAccess.getChansonAccess().getGroup_12(), "rule__Chanson__Group_12__0");
			builder.put(grammarAccess.getPersonneAccess().getGroup(), "rule__Personne__Group__0");
			builder.put(grammarAccess.getPersonneAccess().getGroup_3(), "rule__Personne__Group_3__0");
			builder.put(grammarAccess.getPersonneAccess().getGroup_4(), "rule__Personne__Group_4__0");
			builder.put(grammarAccess.getPersonneAccess().getGroup_4_3(), "rule__Personne__Group_4_3__0");
			builder.put(grammarAccess.getPersonneAccess().getGroup_5(), "rule__Personne__Group_5__0");
			builder.put(grammarAccess.getPersonneAccess().getGroup_5_3(), "rule__Personne__Group_5_3__0");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getAlbumsAssignment_4(), "rule__MaisonDeDisques__AlbumsAssignment_4");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getAlbumsAssignment_5_1(), "rule__MaisonDeDisques__AlbumsAssignment_5_1");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getChansonsAssignment_9(), "rule__MaisonDeDisques__ChansonsAssignment_9");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getChansonsAssignment_10_1(), "rule__MaisonDeDisques__ChansonsAssignment_10_1");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getPersonnesAssignment_14(), "rule__MaisonDeDisques__PersonnesAssignment_14");
			builder.put(grammarAccess.getMaisonDeDisquesAccess().getPersonnesAssignment_15_1(), "rule__MaisonDeDisques__PersonnesAssignment_15_1");
			builder.put(grammarAccess.getAlbumAccess().getAnneeSortieAssignment_2_1(), "rule__Album__AnneeSortieAssignment_2_1");
			builder.put(grammarAccess.getAlbumAccess().getTypeAssignment_3_1(), "rule__Album__TypeAssignment_3_1");
			builder.put(grammarAccess.getAlbumAccess().getNomAssignment_4_1(), "rule__Album__NomAssignment_4_1");
			builder.put(grammarAccess.getAlbumAccess().getIdAssignment_5_1(), "rule__Album__IdAssignment_5_1");
			builder.put(grammarAccess.getAlbumAccess().getChansonsAssignment_8(), "rule__Album__ChansonsAssignment_8");
			builder.put(grammarAccess.getAlbumAccess().getChansonsAssignment_9_1(), "rule__Album__ChansonsAssignment_9_1");
			builder.put(grammarAccess.getChansonAccess().getIdAssignment_2_1(), "rule__Chanson__IdAssignment_2_1");
			builder.put(grammarAccess.getChansonAccess().getTitreAssignment_3_1(), "rule__Chanson__TitreAssignment_3_1");
			builder.put(grammarAccess.getChansonAccess().getChanteursAssignment_6(), "rule__Chanson__ChanteursAssignment_6");
			builder.put(grammarAccess.getChansonAccess().getChanteursAssignment_7_1(), "rule__Chanson__ChanteursAssignment_7_1");
			builder.put(grammarAccess.getChansonAccess().getAuteurAssignment_11(), "rule__Chanson__AuteurAssignment_11");
			builder.put(grammarAccess.getChansonAccess().getAuteurAssignment_12_1(), "rule__Chanson__AuteurAssignment_12_1");
			builder.put(grammarAccess.getPersonneAccess().getNomAssignment_3_1(), "rule__Personne__NomAssignment_3_1");
			builder.put(grammarAccess.getPersonneAccess().getChansonsChanteurAssignment_4_2(), "rule__Personne__ChansonsChanteurAssignment_4_2");
			builder.put(grammarAccess.getPersonneAccess().getChansonsChanteurAssignment_4_3_1(), "rule__Personne__ChansonsChanteurAssignment_4_3_1");
			builder.put(grammarAccess.getPersonneAccess().getChansonsAuteurAssignment_5_2(), "rule__Personne__ChansonsAuteurAssignment_5_2");
			builder.put(grammarAccess.getPersonneAccess().getChansonsAuteurAssignment_5_3_1(), "rule__Personne__ChansonsAuteurAssignment_5_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MaisonDeDisqueGrammarAccess grammarAccess;

	@Override
	protected InternalMaisonDeDisqueParser createParser() {
		InternalMaisonDeDisqueParser result = new InternalMaisonDeDisqueParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MaisonDeDisqueGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MaisonDeDisqueGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
